// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: todos.sql

package db

import (
	"context"
)

const countTodosBySessionAndStatus = `-- name: CountTodosBySessionAndStatus :one
SELECT COUNT(*) FROM todos
WHERE session_id = ? AND status = ?
`

type CountTodosBySessionAndStatusParams struct {
	SessionID string `json:"session_id"`
	Status    string `json:"status"`
}

func (q *Queries) CountTodosBySessionAndStatus(ctx context.Context, arg CountTodosBySessionAndStatusParams) (int64, error) {
	row := q.queryRow(ctx, q.countTodosBySessionAndStatusStmt, countTodosBySessionAndStatus, arg.SessionID, arg.Status)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createTodo = `-- name: CreateTodo :one
INSERT INTO todos (
    id,
    session_id,
    project_path,
    content,
    status,
    created_at,
    updated_at
) VALUES (
    ?, ?, ?, ?, ?, ?, ?
) RETURNING id, session_id, project_path, content, status, created_at, updated_at
`

type CreateTodoParams struct {
	ID          string `json:"id"`
	SessionID   string `json:"session_id"`
	ProjectPath string `json:"project_path"`
	Content     string `json:"content"`
	Status      string `json:"status"`
	CreatedAt   int64  `json:"created_at"`
	UpdatedAt   int64  `json:"updated_at"`
}

func (q *Queries) CreateTodo(ctx context.Context, arg CreateTodoParams) (Todo, error) {
	row := q.queryRow(ctx, q.createTodoStmt, createTodo,
		arg.ID,
		arg.SessionID,
		arg.ProjectPath,
		arg.Content,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.ProjectPath,
		&i.Content,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTodo = `-- name: DeleteTodo :exec
DELETE FROM todos
WHERE id = ?
`

func (q *Queries) DeleteTodo(ctx context.Context, id string) error {
	_, err := q.exec(ctx, q.deleteTodoStmt, deleteTodo, id)
	return err
}

const deleteTodosBySession = `-- name: DeleteTodosBySession :exec
DELETE FROM todos
WHERE session_id = ?
`

func (q *Queries) DeleteTodosBySession(ctx context.Context, sessionID string) error {
	_, err := q.exec(ctx, q.deleteTodosBySessionStmt, deleteTodosBySession, sessionID)
	return err
}

const getTodo = `-- name: GetTodo :one
SELECT id, session_id, project_path, content, status, created_at, updated_at FROM todos
WHERE id = ?
`

func (q *Queries) GetTodo(ctx context.Context, id string) (Todo, error) {
	row := q.queryRow(ctx, q.getTodoStmt, getTodo, id)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.ProjectPath,
		&i.Content,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTodosBySession = `-- name: ListTodosBySession :many
SELECT id, session_id, project_path, content, status, created_at, updated_at FROM todos
WHERE session_id = ?
ORDER BY created_at ASC
`

func (q *Queries) ListTodosBySession(ctx context.Context, sessionID string) ([]Todo, error) {
	rows, err := q.query(ctx, q.listTodosBySessionStmt, listTodosBySession, sessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.ProjectPath,
			&i.Content,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTodosBySessionAndProject = `-- name: ListTodosBySessionAndProject :many
SELECT id, session_id, project_path, content, status, created_at, updated_at FROM todos
WHERE session_id = ? AND project_path = ?
ORDER BY created_at ASC
`

type ListTodosBySessionAndProjectParams struct {
	SessionID   string `json:"session_id"`
	ProjectPath string `json:"project_path"`
}

func (q *Queries) ListTodosBySessionAndProject(ctx context.Context, arg ListTodosBySessionAndProjectParams) ([]Todo, error) {
	rows, err := q.query(ctx, q.listTodosBySessionAndProjectStmt, listTodosBySessionAndProject, arg.SessionID, arg.ProjectPath)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.ProjectPath,
			&i.Content,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTodosBySessionAndStatus = `-- name: ListTodosBySessionAndStatus :many
SELECT id, session_id, project_path, content, status, created_at, updated_at FROM todos
WHERE session_id = ? AND status = ?
ORDER BY created_at ASC
`

type ListTodosBySessionAndStatusParams struct {
	SessionID string `json:"session_id"`
	Status    string `json:"status"`
}

func (q *Queries) ListTodosBySessionAndStatus(ctx context.Context, arg ListTodosBySessionAndStatusParams) ([]Todo, error) {
	rows, err := q.query(ctx, q.listTodosBySessionAndStatusStmt, listTodosBySessionAndStatus, arg.SessionID, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.ProjectPath,
			&i.Content,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTodosBySessionProjectAndStatus = `-- name: ListTodosBySessionProjectAndStatus :many
SELECT id, session_id, project_path, content, status, created_at, updated_at FROM todos
WHERE session_id = ? AND project_path = ? AND status = ?
ORDER BY created_at ASC
`

type ListTodosBySessionProjectAndStatusParams struct {
	SessionID   string `json:"session_id"`
	ProjectPath string `json:"project_path"`
	Status      string `json:"status"`
}

func (q *Queries) ListTodosBySessionProjectAndStatus(ctx context.Context, arg ListTodosBySessionProjectAndStatusParams) ([]Todo, error) {
	rows, err := q.query(ctx, q.listTodosBySessionProjectAndStatusStmt, listTodosBySessionProjectAndStatus, arg.SessionID, arg.ProjectPath, arg.Status)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Todo{}
	for rows.Next() {
		var i Todo
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.ProjectPath,
			&i.Content,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTodo = `-- name: UpdateTodo :one
UPDATE todos
SET content = ?, status = ?, updated_at = ?
WHERE id = ?
RETURNING id, session_id, project_path, content, status, created_at, updated_at
`

type UpdateTodoParams struct {
	Content   string `json:"content"`
	Status    string `json:"status"`
	UpdatedAt int64  `json:"updated_at"`
	ID        string `json:"id"`
}

func (q *Queries) UpdateTodo(ctx context.Context, arg UpdateTodoParams) (Todo, error) {
	row := q.queryRow(ctx, q.updateTodoStmt, updateTodo,
		arg.Content,
		arg.Status,
		arg.UpdatedAt,
		arg.ID,
	)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.ProjectPath,
		&i.Content,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTodoStatus = `-- name: UpdateTodoStatus :one
UPDATE todos
SET status = ?, updated_at = ?
WHERE id = ?
RETURNING id, session_id, project_path, content, status, created_at, updated_at
`

type UpdateTodoStatusParams struct {
	Status    string `json:"status"`
	UpdatedAt int64  `json:"updated_at"`
	ID        string `json:"id"`
}

func (q *Queries) UpdateTodoStatus(ctx context.Context, arg UpdateTodoStatusParams) (Todo, error) {
	row := q.queryRow(ctx, q.updateTodoStatusStmt, updateTodoStatus, arg.Status, arg.UpdatedAt, arg.ID)
	var i Todo
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.ProjectPath,
		&i.Content,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
